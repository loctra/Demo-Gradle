apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    mavenLocal()
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.google.gms:google-services:3.1.1'
        // replace with the current version of the Android plugin
//        classpath 'io.fabric.tools:gradle:1.+'
    }
}

android {
    compileSdkVersion COMPILESDK
    buildToolsVersion BUILD_TOOLS

    defaultConfig {
        applicationId "com.example.loctra.gradle"
        minSdkVersion MIN_SDK
        targetSdkVersion TARGET_SDK
        versionCode VERSION_CODE
        versionName VERSION_NAME
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["resourcePackageName": android.defaultConfig.applicationId]
            }
        }
    }

    signingConfigs {
        signingConfigs {
            debug {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
            release {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
        }
    }

    flavorDimensions "app"
    productFlavors {
        // Should be rename productFlavors with your app name "my_app_name" = "abcxyz" *1
        my_app_name {
            dimension "app"
            applicationId "com.example.loctra.gradle"
            versionName versionName
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            // replace on AndroidManifest.xml
//            manifestPlaceholders = [fabric_key: FABRIC_KEY]
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // Should be rename productFlavors with your app name "my_app_name" = "abcxyz" same *1
            productFlavors.my_app_name.signingConfig signingConfigs.release
            // replace on AndroidManifest.xml
//            manifestPlaceholders = [fabric_key: FABRIC_KEY]
        }
    }
    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }
    applicationVariants.all { variant ->
        appendVersionNameVersionCode(variant)
        def flavorName = variant.flavorName
        // your filename need redirect to build default config [in this app is app.properties]
        def propFile = file("../${flavorName}.properties")
        // print in log build gradle
        println propFile
        // condition if your propFile is exist and can read
        if (propFile.canRead()) {
            def Properties props = new Properties()
            props.load(new FileInputStream(propFile))
            if (props != null) {
                // concat your define on app.properties
                // when you change build variants all file will split two build type debuggable and release
                // for ex: DOMAIN in production to DOMAIN_DEBUG in develop
                // See more http://devdeeds.com/build-level-variables-methods-using-gradle/
                def buildTypePostfix = variant.buildType.name == "debug" ? "_DEBUG" : ""

                variant.buildConfigField "String", "DOMAIN", "\"" + props['DOMAIN' + buildTypePostfix] + "\""
                variant.buildConfigField "String", "HOST_API", "\"" + props['HOST_API' + buildTypePostfix] + "\""
                variant.buildConfigField "String", "DEEP_LINK", "\"" + props['DEEP_LINK'] + "\""
                variant.buildConfigField "String", "PROVIDES", "\"" + props['PROVIDES'] + "\""

                // this variants define for String, same a define String on res
                // See more https://stackoverflow.com/questions/28954071/how-can-i-access-a-buildconfig-value-in-my-androidmanifest-xml-file
                variant.resValue "string", "google_maps_key", props['GOOGLE_MAPS_KEY']
                variant.resValue "string", "facebook_app_id", props['FACEBOOK_APP_ID']
                variant.resValue "string", "scheme", props['SCHEME']
                variant.resValue "string", "scheme_https", props['SCHEME_HTTPS']
            }
        } else {
            println "Missing app properties file"
        }
    }
    dexOptions {
        javaMaxHeapSize = "4g"
        preDexLibraries = false
    }
    compileOptions {
        targetCompatibility 1.7
        sourceCompatibility 1.7
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    dataBinding {
        enabled = true
    }
}

// this method output apk file name
def appendVersionNameVersionCode(variant) {
    variant.outputs.all {
        outputFileName = "${variant.name}-v${variant.versionCode}-${variant.versionName}.apk"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    implementation "com.android.support:support-v4:$SUPPORT_LIB"
    implementation "com.android.support:appcompat-v7:$SUPPORT_LIB"
    implementation "com.android.support:cardview-v7:$SUPPORT_LIB"
    implementation "com.android.support:design:$SUPPORT_LIB"
    implementation "com.android.support:recyclerview-v7:$SUPPORT_LIB"

//    implementation "com.google.android.gms:play-services-maps:$GOOGLE_PLAY_LIB"
//    implementation "com.google.android.gms:play-services-location:$GOOGLE_PLAY_LIB"

    implementation "com.android.support:multidex:$MULTIDEX_VERSION"

    // https://github.com/permissions-dispatcher/AndroidAnnotationsPermissionsDispatcherPlugin
    implementation("com.github.hotchemi:permissionsdispatcher:$PERMISSIONSDISPATCHER_VERSION") {
        exclude module: 'support-compat'
        exclude module: 'support-v13'
    }
    annotationProcessor "com.github.hotchemi:permissionsdispatcher-processor:$PERMISSIONSDISPATCHER_VERSION"
    implementation "org.androidannotations:androidannotations-api:$AA_VERSION"
    annotationProcessor "org.androidannotations:androidannotations:$AA_VERSION"
    annotationProcessor 'com.github.AleksanderMielczarek:AndroidAnnotationsPermissionsDispatcherPlugin:2.1.1'

    implementation "com.squareup.okhttp3:okhttp:$OKHTTP3_VERSION"
    implementation "com.squareup.okhttp3:logging-interceptor:$OKHTTP3_VERSION"
    implementation "com.google.code.gson:gson:$GSON_VERSION"
    implementation "com.squareup.retrofit2:retrofit:$RETROFIT2_VERSION"
    implementation "com.squareup.retrofit2:adapter-rxjava:$RETROFIT2_VERSION"
    implementation "com.squareup.retrofit2:converter-gson:$RETROFIT2_VERSION"
    implementation "com.squareup.retrofit2:converter-scalars:$RETROFIT2_VERSION"

    implementation "io.reactivex:rxandroid:$RXANDROID_VERSION"
    implementation "io.reactivex:rxjava:$RXJAVA_VERSION"
    implementation "com.google.dagger:dagger:$DAGGER_VERSION"
}
